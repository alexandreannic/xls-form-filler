{"version":3,"sources":["../src/XlsFormFiller/XlsFormFiller.tsx","../src/engine/path/Path.ts","../src/utils/helpers.ts","../src/XlsFormFiller/Question.tsx","../src/XlsFormFiller/layout/QuestionLayout.tsx","../src/XlsFormFiller/layout/GroupLayout.tsx","../src/XlsFormFiller/layout/Title.tsx","../src/XlsFormFiller/layout/RepeatLayout.tsx","../src/engine/ast/astEval.ts","../src/engine/ast/functions.ts","../src/XlsFormFiller/type/QuestionLocation.tsx","../src/XlsFormFiller/type/QuestionFile.tsx","../src/XlsFormFiller/useAttachments.ts"],"sourcesContent":["import {createContext, useContext, useEffect, useMemo, useState} from 'react'\nimport {seq} from '@axanc/ts-utils'\nimport {Box, Button, Icon, MenuItem, Select} from '@mui/material'\nimport {Kobo} from 'kobo-sdk'\nimport {FormValues, LodashPath, Path} from '../engine/path/Path.ts'\nimport cloneDeep from 'lodash.clonedeep'\nimport set from 'lodash.set'\nimport {surveyShort} from '../../test/survey/surveyShort.ts'\nimport get from 'lodash.get'\nimport {survey} from '../../test/survey/survey.ts'\nimport {formatDateTime, nestGroups} from '../utils/helpers.ts'\nimport {Question} from './Question.tsx'\nimport {surveyMsme} from '../../test/survey/surveyMsme.ts'\nimport {useAttachments} from './useAttachments.ts'\nimport {now} from '../engine/ast/functions.ts'\n\nexport type XlsFormProps = {\n  onSubmit: (_: {attachments: File[], answers: FormValues}) => void\n  labels?: {\n    submit?: string\n    getMyLocation?: string\n    selectImage?: string\n    changeImage?: string\n    selectFile?: string\n    changeFile?: string\n  }\n  survey: Kobo.Form['content']\n}\n\nexport interface XlsFormFillerContext {\n  choicesMap: Record<string, Kobo.Form.Choice[]>\n  questionsMap: Record<string, Kobo.Form.Question>\n  values: FormValues\n  getValue: (path: Path, name: string) => any\n  updateValues: (path: LodashPath, value: any) => void\n  langIndex: number\n  attachments: ReturnType<typeof useAttachments>\n  labels: XlsFormProps['labels']\n}\n\nconst Context = createContext({} as XlsFormFillerContext)\n\nexport const useXlsFormFillerContext = () => useContext<XlsFormFillerContext>(Context)\n\nexport const XlsFormFiller = ({\n  survey,\n  onSubmit,\n  labels = {\n    submit: 'Submit',\n    getMyLocation: 'Get my location',\n    selectImage: 'Click to select an image...',\n    changeImage: 'Click to change the image...',\n    selectFile: 'Click to select an file...',\n    changeFile: 'Click to change the file...',\n  },\n}: XlsFormProps) => {\n  const [langIndex, setLangIndex] = useState(0)\n  const [values, setValues] = useState<FormValues>({})\n  const attachments = useAttachments()\n  useEffect(() => {\n    console.log('default', survey.translations.indexOf(survey.settings.default_language))\n    setLangIndex(survey.translations.indexOf(survey.settings.default_language))\n  }, [survey])\n\n  const {\n    groupedSurvey,\n    choicesMap,\n    questionsMap,\n  } = useMemo(() => {\n    return {\n      groupedSurvey: nestGroups(survey.survey),\n      choicesMap: seq(survey.choices).groupBy(_ => _.list_name),\n      questionsMap: seq(survey.survey).groupByFirst(_ => _.name),\n    }\n  }, [survey])\n\n  const getValue = (path: Path, name: string): any => {\n    return get(values, [...path.toLodashPath(), name])\n  }\n\n  const updateValues = (path: LodashPath, value: any) => {\n    setValues(prev => {\n      const clone = cloneDeep(prev)\n      set(clone, path, value)\n      return clone\n    })\n  }\n\n  return (\n    <Context.Provider value={{\n      labels,\n      values,\n      getValue,\n      updateValues,\n      langIndex,\n      choicesMap,\n      questionsMap,\n      attachments,\n    }}>\n      <Box sx={{width: '100%'}}>\n        <Select sx={{mb: 1,}} size=\"small\" value={langIndex} onChange={e => setLangIndex(+e.target.value)} variant=\"outlined\">\n          {survey.translations.map((_, i) =>\n            <MenuItem key={i} value={i}>{_}</MenuItem>\n          )}\n        </Select>\n        {groupedSurvey.map(q =>\n          <Question key={q.name} q={q} path={new Path()}/>\n        )}\n      </Box>\n      <Box sx={{mt: 1, display: 'flex', justifyContent: 'flex-end'}}>\n        <Button\n          onClick={() => {\n            const answers = {...values}\n            if (questionsMap.start && !values.start) {\n              answers.start = formatDateTime(now)\n            }\n            if (questionsMap.end) {\n              answers.end = formatDateTime(new Date())\n            }\n            onSubmit({\n              answers,\n              attachments: Object.values(attachments.list),\n            })\n          }}\n          startIcon={<Icon>send</Icon>}\n          variant=\"contained\"\n        >\n          {labels.submit}\n        </Button>\n      </Box>\n    </Context.Provider>\n  )\n}\n","export type FormValue = any\nexport type FormValues = Record<string, FormValue>\nimport get from 'lodash.get'\n\ntype PathToken = {\n  index: number\n  repeatGroupName: string\n}\n\nexport type LodashPath = (string | number)[]\n\nexport class Path {\n  private readonly value: PathToken[]\n\n  constructor(tokens: PathToken[] = []) {\n    this.value = tokens\n  }\n\n  get() {\n    return this.value\n  }\n\n  add(token: PathToken) {\n    return new Path([...this.value, token])\n  }\n\n  parentPath(): Path {\n    return new Path(this.value.length > 0 ? this.value.slice(0, -1) : [])\n  }\n\n  collectDeeply(values: FormValues, name: string): any | undefined {\n    const results: any[] = []\n    const traverse = (node: any): void => {\n      if (Array.isArray(node)) {\n        for (const item of node) {\n          traverse(item)\n        }\n      } else if (typeof node === 'object' && node !== null) {\n        for (const key in node) {\n          if (key === name) {\n            results.push(node[key])\n          } else {\n            traverse(node[key])\n          }\n        }\n      }\n    }\n    traverse(values)\n    return results.length > 0 ? results : undefined\n  }\n\n  searchInBranch(values: FormValues, name: string): any | undefined {\n    let cursor: Path = this\n    for (; ;) {\n      const fullPath = [...cursor.toLodashPath(), name]\n      const value = get(values, fullPath)\n      if (value !== undefined) return value\n      if (cursor.value.length === 0) return\n      cursor = cursor.parentPath()\n    }\n  }\n\n  // private findPrimitiveKey(obj: any, key: string): string | undefined {\n  //   if (!obj || typeof obj !== 'object') return undefined\n  //   if (key in obj && typeof obj[key] === 'string') return obj[key]\n  //   return undefined\n  // }\n\n  get last(): PathToken | undefined {\n    return this.value[this.value.length - 1]\n  }\n\n  get first(): PathToken | undefined {\n    return this.value[0]\n  }\n\n  toString() {\n    return this.value.flatMap(_ => `${_.repeatGroupName}[${_.index}]`).join('.')\n  }\n\n  toLodashPath(): LodashPath {\n    return this.value.flatMap(_ => [_.repeatGroupName, _.index])\n  }\n}","import {Kobo} from 'kobo-sdk'\n\nexport const isValidDateString = (d: any): boolean => {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(d)\n}\n\nexport const formatDateTime = (_: Date): string => _.toISOString()\n\nexport type Group = Omit<Kobo.Form.Question, 'type'> & {\n  type: 'begin_group' | 'begin_repeat'\n  children: QuestionGrouped[]\n}\n\nexport const formatFileSize = (bytes: number) => {\n  if (bytes === 0) return '0 Bytes'\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB']\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  const size = bytes / Math.pow(1024, i)\n  return `${size.toFixed(2)} ${sizes[i]}`\n}\n\n\nexport type Question = Omit<Kobo.Form.Question, 'type'> & {\n  type: Exclude<Kobo.Form.QuestionType, 'begin_repeat' | 'begin_group'>\n}\n\nexport type QuestionGrouped = Group | Question\n\nexport function nestGroups(flat: Kobo.Form.Question[]): QuestionGrouped[] {\n  const stack: Group[] = []\n  const result: QuestionGrouped[] = []\n\n  for (const item of flat) {\n    if (item.type === 'begin_group' || item.type === 'begin_repeat') {\n      const group: Group = {...item as Group, children: []}\n      stack.push(group)\n    } else if (item.type === 'end_group' || item.type === 'end_repeat') {\n      const completed = stack.pop()\n      if (!completed) {\n        throw new Error('Unmatched end_group found')\n      }\n\n      if (stack.length > 0) {\n        stack[stack.length - 1].children.push(completed)\n      } else {\n        result.push(completed)\n      }\n    } else {\n      if (stack.length > 0) {\n        stack[stack.length - 1].children.push(item as QuestionGrouped)\n      } else {\n        result.push(item as QuestionGrouped)\n      }\n    }\n  }\n\n  // if (stack.length > 0) {\n  //   throw new Error('Unclosed begin_group found')\n  // }\n\n  return result\n}\n","import {memo, useEffect, useMemo} from 'react'\nimport {FormValue, Path} from '../engine/path/Path.ts'\nimport {QuestionGrouped} from '../utils/helpers.ts'\nimport {useXlsFormFillerContext} from './XlsFormFiller.tsx'\nimport {Checkbox, FormControlLabel, FormGroup, Input, Radio, RadioGroup} from '@mui/material'\nimport {Kobo} from 'kobo-sdk'\nimport {QuestionLayout, QuestionLayoutProps} from './layout/QuestionLayout.tsx'\nimport {GroupLayout} from './layout/GroupLayout.tsx'\nimport {mapFor} from '@axanc/ts-utils'\nimport {RepeatLayout} from './layout/RepeatLayout.tsx'\nimport {AstFormEvaluator} from '../engine/ast/astEval.ts'\nimport {QuestionLocation} from './type/QuestionLocation.tsx'\nimport {QuestionFile} from './type/QuestionFile.tsx'\n\nconst parseChoiceFilter = (q: Kobo.Form.Question): undefined | {key: string, questionName: string} => {\n  if (!q.choice_filter) return\n  const [, key, questionName] = q.choice_filter.match(/([^=]*)=\\$\\{(.*?)}/) ?? []\n  return {key, questionName}\n}\n\nconst getFilteredList = ({\n  q,\n  choicesMap,\n  value,\n}: {\n  value: FormValue\n  q: Kobo.Form.Question\n  choicesMap: Record<string, Kobo.Form.Choice[]>\n}) => {\n  const choiceFilter = parseChoiceFilter(q)\n  let choices = choicesMap[q.select_from_list_name!] ?? []\n  if (choiceFilter) {\n    choices = choices.filter(_ => (_ as any)[choiceFilter.key] === value)\n  }\n  return choices\n}\n\nexport const Question = memo(({\n  q,\n  path,\n}: {\n  path: Path\n  q: QuestionGrouped\n}) => {\n  const ctx = useXlsFormFillerContext()\n\n  const logic = useMemo(() => {\n    const engine = new AstFormEvaluator({\n      values: ctx.values,\n      path,\n      thatName: q.name,\n      questionsMap: ctx.questionsMap,\n    })\n    const relevant = q.relevant ? engine.eval(q.relevant) ?? false : true\n    return relevant ? {\n      relevant,\n      calculation: engine.eval(q.calculation),\n      defaultValue: engine.eval(q.default),\n      valid: engine.eval(q.constraint) ?? true,\n      repeated: engine.eval(q.repeat_count),\n    } : {relevant}\n  }, [ctx.values])\n\n  const onChange = (value: FormValue) => {\n    //ChangeEvent<HTMLInputElement>\n    ctx.updateValues([...path.toLodashPath(), q.name], value)\n  }\n\n  const getLabel = (property?: string[]): string => {\n    return property?.[ctx.langIndex] ?? ''\n  }\n\n  const layout: QuestionLayoutProps = {\n    visible: logic.relevant,\n    label: getLabel(q.label),\n    hint: getLabel(q.hint),\n    error: logic.valid ? undefined : getLabel(q.constraint_message)\n  }\n\n  const value = useMemo(() => {\n    return ctx.getValue(path, q.name)\n  }, [path, q.name])\n\n  useEffect(() => {\n    if (logic.defaultValue !== undefined && value !== logic.defaultValue) {\n      onChange(logic.defaultValue)\n    }\n    if (logic.calculation !== undefined && value !== logic.calculation) {\n      onChange(logic.calculation)\n    }\n  }, [logic.defaultValue, value, logic.calculation])\n\n  switch (q.type) {\n    case 'begin_group': {\n      return (\n        <GroupLayout {...layout}>\n          {q.children.map(q =>\n            <Question key={q.name} q={q} path={path}/>\n          )}\n        </GroupLayout>\n      )\n    }\n    case 'begin_repeat': {\n      if (logic.repeated <= 0) return <></>\n      return mapFor(logic.repeated, i => (\n        <RepeatLayout index={i} key={i} {...layout}>\n          {q.children.map(_ =>\n            <Question\n              key={i}\n              path={path.add({index: i, repeatGroupName: q.name})}\n              q={_}\n            />\n          )}\n        </RepeatLayout>\n      ))\n    }\n    case 'note': {\n      return (\n        <QuestionLayout {...layout}>\n          {logic.calculation && (\n            <Input value={value} disabled/>\n          )}\n        </QuestionLayout>\n      )\n    }\n    case 'date': {\n      return (\n        <QuestionLayout {...layout}>\n          <Input\n            value={value}\n            required={q.required}\n            fullWidth\n            type=\"date\"\n            onChange={e => onChange(e.target.value)}\n          />\n        </QuestionLayout>\n      )\n    }\n    case 'text': {\n      return (\n        <QuestionLayout {...layout}>\n          <Input\n            value={value}\n            required={q.required}\n            fullWidth\n            onChange={e => onChange(e.target.value)}\n          />\n        </QuestionLayout>\n      )\n    }\n    case 'integer': {\n      return (\n        <QuestionLayout {...layout}>\n          <Input\n            value={value}\n            required={q.required}\n            fullWidth\n            type=\"number\"\n            onChange={e => onChange(e.target.value)}\n          />\n        </QuestionLayout>\n      )\n    }\n    case 'select_one': {\n      const choices = getFilteredList({choicesMap: ctx.choicesMap, q, value})\n      return (\n        <QuestionLayout {...layout}>\n          <RadioGroup\n            value={ctx.getValue(path, q.name) ?? ''}\n            onChange={e => onChange(e.target.value)}\n          >\n            {choices.map(c => {\n              return (\n                <FormControlLabel label={c.label?.[ctx.langIndex] ?? ''} control={<Radio/>} value={c.name} key={c.name}/>\n              )\n            })}\n          </RadioGroup>\n        </QuestionLayout>\n      )\n    }\n    case 'select_multiple': {\n      const choices = getFilteredList({choicesMap: ctx.choicesMap, q, value})\n      const selectedValues: string[] = ctx.getValue(path, q.name)?.split(' ') ?? []\n      return (\n        <QuestionLayout {...layout}>\n          <FormGroup>\n            {choices.map(c => {\n              const value = c.name\n              const label = c.label?.[ctx.langIndex] ?? ''\n              const checked = selectedValues.includes(value)\n\n              return (\n                <FormControlLabel\n                  key={value}\n                  label={label}\n                  control={\n                    <Checkbox\n                      checked={checked}\n                      onChange={(e) => {\n                        if (e.target.checked)\n                          onChange([...selectedValues, value].join(' ').trim())\n                        else\n                          onChange(selectedValues.filter(v => v !== value).join(' ').trim())\n                      }}\n                    />\n                  }\n                />\n              )\n            })}\n          </FormGroup>\n        </QuestionLayout>\n      )\n    }\n    case 'geopoint': {\n      return (\n        <QuestionLayout {...layout}>\n          <QuestionLocation value={value} onChange={onChange}/>\n        </QuestionLayout>\n      )\n    }\n    case 'file':\n    case 'image': {\n      return (\n        <QuestionLayout {...layout}>\n          <QuestionFile\n            type={q.type}\n            file={ctx.attachments.get(value)}\n            onClear={() => {\n              onChange(undefined)\n              ctx.attachments.clearAttachmentByName(value)\n            }}\n            onChange={file => {\n              ctx.attachments.saveAttachment(file)\n              onChange(file.name)\n            }}\n          />\n        </QuestionLayout>\n      )\n    }\n    case 'start':\n    case 'end':\n    case 'calculate': {\n      return <></>\n    }\n    default: {\n      return (\n        <div>TODO {q.type} {q.name}</div>\n      )\n    }\n  }\n})","import {ReactNode} from 'react'\nimport {alpha, Box, Collapse, styled, useTheme} from '@mui/material'\nimport ReactMarkdown from 'react-markdown'\n\nconst Root = styled(Box)<{error?: boolean}>(({theme, error}) => ({\n  background: error ? alpha(theme.palette.error.light, .15) : theme.palette.background.paper,\n  // border: `1px solid ${theme.palette.divider}`,\n  borderRadius: theme.shape.borderRadius + 'px',\n  // border: error ? `2px solid ${theme.palette.error.main}` : undefined,\n  borderLeft: error ? `2px solid ${theme.palette.error.main}` : undefined,\n  padding: `${theme.spacing(1)} ${theme.spacing(2)}`,\n  marginBottom: theme.spacing(.5),\n  // py: 1,\n  // px: 2,\n  // mb: .5,\n  '&:not(:first-of-type)': {\n    borderTopLeftRadius: '4px',\n    borderTopRightRadius: '4px',\n  },\n  '&:not(:last-of-type)': {\n    borderBottomLeftRadius: '4px',\n    borderBottomRightRadius: '4px',\n  }\n}))\n\nexport type QuestionLayoutProps = {\n  label: string\n  hint?: string\n  error?: string\n  children?: ReactNode\n  visible?: boolean\n}\n\nexport const QuestionLayout = ({\n  label,\n  hint,\n  children,\n  visible,\n  error,\n}: QuestionLayoutProps) => {\n  const t = useTheme()\n  return (\n    <Collapse in={visible} unmountOnExit>\n      <Root error={!!error}>\n        <Box sx={{mb: children ? 1 : 0}}>\n          <Box sx={{fontWeight: t.typography.fontWeightBold}}>\n            <ReactMarkdown components={{p: ({children}) => <>{children}</>}}>\n              {label}\n            </ReactMarkdown>\n          </Box>\n          {hint && (\n            <Box sx={{color: t.palette.text.secondary}}>\n              <ReactMarkdown components={{p: ({children}) => <>{children}</>}}>\n                {hint}\n              </ReactMarkdown>\n            </Box>\n          )}\n        </Box>\n        {children}\n        <Box sx={{color: t.palette.error.main}}>{error}</Box>\n      </Root>\n    </Collapse>\n  )\n}","import {ReactNode, useState} from 'react'\nimport {Box, Collapse, Icon, IconButton, useTheme} from '@mui/material'\nimport {Title} from './Title.tsx'\n\nexport const GroupLayout = ({\n  label,\n  hint,\n  children,\n}: {\n  label?: string,\n  hint?: string,\n  children: ReactNode\n}) => {\n  const t = useTheme()\n  const [open, setOpen] = useState(true)\n  return (\n    <Box sx={{position: 'relative', mb: 2,}}>\n      <Box sx={{display: 'flex', alignItems: 'center', mb: 1,}}>\n        <IconButton size=\"small\" onClick={() => setOpen(_ => !_)}>\n          <Icon>{open ? 'keyboard_arrow_down' : 'keyboard_arrow_right'}</Icon>\n        </IconButton>\n        <Title>{label}</Title>\n      </Box>\n      <Collapse in={open} timeout=\"auto\" unmountOnExit>\n        <Box sx={{\n          position: 'relative',\n          pl: 1,\n          ml: '14px',\n          '&:before': {\n            position: 'absolute',\n            top: 0,\n            bottom: 0,\n            left: 0,\n            content: '\" \"',\n            width: '1px',\n            background: t.palette.divider,\n          }\n        }}>\n          {children}\n        </Box>\n      </Collapse>\n    </Box>\n  )\n}","import {Box, useTheme} from '@mui/material'\nimport {BoxProps} from '@mui/system'\n\nexport const Title = ({\n  sx,\n  ...props\n}: BoxProps) => {\n  const t = useTheme()\n  return (\n    <Box sx={{fontSize: '1.25em', fontWeight: t.typography.fontWeightBold, ...sx}} {...props}/>\n  )\n}","import {Box, useTheme} from '@mui/material'\nimport {ReactNode} from 'react'\nimport {Title} from './Title.tsx'\n\nexport const RepeatLayout = ({\n  children,\n  index,\n  hint,\n  label,\n}: {\n  hint?: string,\n  label?: string\n  children: ReactNode\n  index: number\n}) => {\n  const t = useTheme()\n  return (\n    <Box sx={{position: 'relative', p: 1, mb: 1, boxShadow: t.shadows[1], borderRadius: t.shape.borderRadius + 'px'}}>\n      <Title sx={{mb: 1}}>{label}</Title>\n      <Box sx={{\n        color: t.palette.info.contrastText,\n        position: 'absolute',\n        fontSize: '0.75em',\n        fontWeight: t.typography.fontWeightBold,\n        top: t.spacing(1),\n        right: t.spacing(1),\n        borderRadius: 50,\n        background: t.palette.info.main,\n        width: 20,\n        height: 20,\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center'\n      }}\n      >{index + 1}</Box>\n      {children}\n    </Box>\n  )\n}","import jsep, {BinaryExpression, CallExpression, Expression, Identifier, Literal, UnaryExpression} from 'jsep'\nimport {Kobo} from 'kobo-sdk'\nimport {Path} from '../path/Path.ts'\nimport {functions} from './functions.ts'\nimport {isValidDateString} from '../../utils/helpers.ts'\nimport {duration} from '@axanc/ts-utils'\n\nexport namespace AstError {\n  export class Base extends Error {\n  }\n\n  export class UndefinedParentIndex extends Base {\n  }\n\n  export class InvalidInteger extends Base {\n  }\n\n  export class FunctionNotImplemented extends Base {\n    constructor(fnName: string) {\n      super(fnName)\n    }\n  }\n}\n\n\nconst dateTypes: Set<Kobo.Form.QuestionType> = new Set([\n  'date',\n  'datetime',\n  'today',\n  'start',\n  'end',\n])\n\nexport interface EvalEnvironment {\n  values: Record<string, any>\n  thatName: string\n  path?: Path\n  questionsMap: Record<string, Kobo.Form.Question>\n}\n\nexport const is = {\n  binary: (expr: Expression): expr is BinaryExpression => expr.type === 'BinaryExpression',\n  call: (expr: Expression): expr is CallExpression => expr.type === 'CallExpression',\n  identifier: (expr: Expression): expr is Identifier => expr.type === 'Identifier',\n  literal: (expr: Expression): expr is Literal => expr.type === 'Literal',\n  unary: (expr: Expression): expr is UnaryExpression => expr.type === 'UnaryExpression',\n}\n\nexport class AstFormEvaluator {\n  constructor(private env: EvalEnvironment) {\n  }\n\n  private preprocessedFormula = (formula: Kobo.Form.Formula) => {\n    let parsed = formula\n      .replace(/position\\(\\.\\.\\)/g, () => {\n        const index = this.env.path?.last?.index\n        if (index === undefined) throw new AstError.UndefinedParentIndex()\n        return (index + 1) + ''\n      })\n      .replace(/(?<=^|[^\\w])\\.(?=$|[^\\w])/g, this.env.thatName) // replace . → thatName\n      .replace(/\\bnot\\(/g, '!(')\n      .replace(/[^<>!]=/g, '==')\n      .replace(/\\bdiv\\b/g, ' / ')\n      .replace(/\\bmod\\b/g, ' % ')\n      .replace(/\\band\\b/g, ' && ')\n      .replace(/\\bor\\b/g, ' || ')\n      .replace(/\\$\\{([^}]+)}/g, (_, name) => name) // replace ${foo} → foo\n    Object.entries(functions).forEach(([functionName, prototype]) => {\n      parsed = parsed.replace(new RegExp(`${prototype.localName}`, 'g'), functionName)\n    })\n    return parsed\n  }\n\n  public eval(formula?: string): any {\n    if (!formula || formula === '') return\n\n    const cleanFormula = this.preprocessedFormula(formula)\n    try {\n      const ast = jsep(cleanFormula)\n      // console.log('ast', ast)\n      const result = this.evaluate(ast)\n      // console.log(formula, '➡️', cleanFormula, '➡️', result)\n      return result\n    } catch (e) {\n      console.error('Eval error:', cleanFormula, e)\n      return\n    }\n  }\n\n  private isTypeDate = (questionName: string) => dateTypes.has(this.env.questionsMap[questionName].type)\n\n  private evaluate = (node: Expression, context?: {inFunction?: string}): any => {\n    if (is.literal(node)) {\n      return node.value\n    }\n    if (is.identifier(node)) {\n      return this.resolveVar(node.name, context)\n    }\n    if (is.binary(node)) {\n      return this.applyBinary(node.operator, this.evaluate(node.left), this.evaluate(node.right))\n    }\n    if (is.unary(node)) {\n      return this.applyUnary(node.operator, this.evaluate(node.argument))\n    }\n    if (is.call(node)) {\n      const fnName = node.callee.name as string\n      const args = node.arguments.map(_ => this.evaluate(_, {inFunction: fnName}))\n      return this.callFunction(fnName, args)\n    }\n    throw new Error(`Unknown node type: ${node.type}`)\n  }\n\n  private resolveVar = (name: string, context?: {inFunction?: string}): any => {\n    // if (name === '.') name = this.env.thatName\n    // console.log('resolveVar', this.env.values, name)\n    const fnResolvingDeeply: (keyof typeof functions)[] = [\n      'sum',\n    ]\n    const resolveDeeply = fnResolvingDeeply.includes(context?.inFunction as any)\n    if (resolveDeeply)\n      return this.env.path?.collectDeeply(this.env.values, name)\n    return this.env.path?.searchInBranch(this.env.values, name)\n    // if (name === '.') return this.parseValue(this.env.thatName)\n    // if (this.env.currentScope?.[name] !== undefined) return this.env.currentScope[name]\n    // if (this.env.values?.[name] !== undefined) return this.env.values[name]\n    //\n    // return undefined\n  }\n\n  // private parseValue(name?: string): any {\n  //   if (!name) return undefined\n  //   return this.env.values?.[name]\n  // }\n\n  private applyBinary = (op: string, left: any, right: any): any => {\n    if (isValidDateString(left)) left = duration(+new Date(left)).toDays\n    if (isValidDateString(right)) right = duration(+new Date(right)).toDays\n    switch (op) {\n      case '+':\n        return left + right\n      case '-': {\n        return left - right\n      }\n      case '*':\n        return left * right\n      case '/':\n        return left / right\n      case '%':\n        return left % right\n      case '==':\n        return left == right\n      case '===':\n        return left === right\n      case '!=':\n        return left != right\n      case '!==':\n        return left !== right\n      case '>':\n        return left > right\n      case '<':\n        return left < right\n      case '>=':\n        return left >= right\n      case '<=':\n        return left <= right\n      case '&&':\n        return left && right\n      case '||':\n        return left || right\n      default:\n        throw new Error(`Unsupported operator: ${op}`)\n    }\n  }\n\n  private applyUnary = (op: string, arg: any): any => {\n    switch (op) {\n      case '+':\n        return +arg\n      case '-':\n        return -arg\n      case '!':\n        return !arg\n      default:\n        throw new Error(`Unsupported unary operator: ${op}`)\n    }\n  }\n\n  private callFunction = (name: string, args: any[]): any => {\n    const fn = functions[name as keyof typeof functions]\n    if (!fn) {\n      throw new AstError.FunctionNotImplemented(name)\n    }\n    return fn.call(this.env, args)\n    // switch (name) {\n    //   case 'regex':\n    //     return new RegExp(args[1]).test(args[0])\n    //   case 'selected':\n    //     return args[0] === args[1] // TODO handle select_multiple\n    //   case 'if':\n    //     return args[0] ? args[1] : args[2]\n    //   case 'sum':\n    //     return Array.isArray(args[0]) ? args[0].reduce((a, b) => a + (+b || 0), 0) : 0\n    //   case 'countSelected':\n    //     return Array.isArray(args[0]) ? args[0].length : 0\n    //   case 'indexedRepeat':\n    //     return this.indexedRepeat(args[0], args[1], args[2])\n    //   case 'position':\n    //     return this.env.path?.last?.index !== undefined ? this.env.path.last.index + 1 : undefined\n    //   default:\n    //     throw new Error(`Unknown function: ${name}`)\n    // }\n  }\n\n  private indexedRepeat(field: string, group: string, index: number): any {\n    return this.env.values?.[group]?.[index - 1]?.[field]\n  }\n}\n","import {AstError, EvalEnvironment} from './astEval.ts'\nimport {seq} from '@axanc/ts-utils'\n\nexport const now = new Date()\n\nclass Function {\n  constructor(private params: {\n    localName: string\n    signature?: {\n      type?: 'number' | 'string' | 'boolean'\n      arityType: 'optional' | 'required'\n    }[]\n    call: (...args: any[]) => any\n  }) {\n  }\n\n  get localName() {\n    return this.params.localName\n  }\n\n  get signature() {\n    return this.params.signature\n  }\n\n  get call() {\n    return this.params.call\n  }\n}\n\nexport const functions = {\n\n  regex: new Function({\n    localName: 'regex',\n    call: (env: EvalEnvironment, args: any[]) => {\n      return new RegExp(args[1]).test(args[0])\n    }\n  }),\n\n  selected: new Function({\n    localName: 'selected',\n    call: (env: EvalEnvironment, args: any[]) => {\n      return args[0]?.split(/\\s+/).includes(args[1])\n    }\n  }),\n\n  if: new Function({\n    localName: 'if',\n    call: (env: EvalEnvironment, args: any[]) => {\n      return args[0] ? args[1] : args[2]\n    }\n  }),\n\n  sum: new Function({\n    localName: 'sum',\n    call: (env: EvalEnvironment, [args]: any[]) => {\n      return args.reduce((sum: number, _: any) => {\n        if (isNaN(_)) return sum\n        return sum + +_\n      }, 0)\n    }\n  }),\n\n  countSelected: new Function({\n    localName: 'count-selected',\n    call: (env: EvalEnvironment, args: any[]) => {\n      return args[0]?.split(' ').length ?? 0\n    }\n  }),\n\n  indexedRepeat:\n    new Function({\n      localName: 'indexed-repeat',\n      call: (env: EvalEnvironment, args: any[]) => {\n        return new RegExp(args[1]).test(args[0])\n      }\n    }),\n\n  position:\n    new Function({\n      localName: 'position',\n      call: (env: EvalEnvironment, args: any[]) => {\n        console.log('position', args)\n        return args[0]\n        // if (typeof args[0] !== 'number') throw new InvalidInteger()\n        // return args[0] === args[1]\n      }\n    }),\n\n  today: new Function({\n    localName: 'today',\n    call: (env: EvalEnvironment, args: any[]) => {\n      return now.toISOString().substring(0, 10)\n    }\n  }),\n\n  int:\n    new Function({\n      localName: 'int',\n      call: (env: EvalEnvironment, [int]: any[]) => {\n        if (typeof int !== 'number') throw new AstError.InvalidInteger()\n        return int > 0 ? Math.floor(int) : Math.ceil(int)\n      }\n    }),\n\n  substr:\n    new Function({\n      localName: 'substr',\n      signature: [\n        {arityType: 'required'},\n        {arityType: 'required', type: 'number'},\n        {arityType: 'optional', type: 'number'},\n      ],\n      call: (env, [string, start, end]): string => {\n        const {length} = string ?? ''\n        if (length === 0) {\n          return ''\n        }\n        end = end ?? length\n        if (start < 0) {\n          start = length + start\n        }\n        if (end < 0) {\n          end = length + end\n        }\n        end = Math.min(Math.max(0, end), length)\n        start = Math.min(Math.max(0, start), length)\n        return start <= end ? string.substring(start, end) : ''\n      }\n    }),\n  ...\n    seq([\n      'abs',\n      'acos',\n      'asin',\n      'atan',\n      'ceil',\n      'cos',\n      'exp',\n      'floor',\n      'log',\n      'log10',\n      'round',\n      'sin',\n      'sqrt',\n      'tan'\n    ] as const).reduceObject(method => [\n      method,\n      new Function({\n        localName: method,\n        call: (env, [number]) => {\n          if (Number.isNaN(number)) {\n            return number\n          }\n          return Math[method](number)\n        }\n      })\n    ]),\n\n  stringLength:\n    new Function({\n      localName: 'string-length',\n      signature: [{arityType: 'optional', type: 'string'}],\n      call: (env, [expression]): number => {\n        return expression?.toString().length\n      }\n    }),\n\n  substringAfter:\n    new Function({\n      localName: 'substring-after',\n      signature: [\n        {arityType: 'required', type: 'string'},\n        {arityType: 'required', type: 'string'},\n      ],\n      call: (env, [haystack, needle]): string => {\n        if (haystack === '') {\n          return ''\n        }\n        if (needle === '') {\n          return haystack\n        }\n        const needleIndex = haystack.indexOf(needle)\n        return needleIndex === -1 ? '' : haystack.slice(needleIndex + 1)\n      }\n    }),\n\n  substringBefore:\n    new Function({\n      localName: 'substring-before',\n      signature: [{arityType: 'required'}, {arityType: 'required', type: 'string'}],\n      call: (env, [haystack, needle]): string => {\n        if (haystack === '') {\n          return ''\n        }\n        const needleIndex = haystack.indexOf(needle)\n        return needleIndex === -1 ? '' : haystack.slice(0, needleIndex)\n      }\n    }),\n\n  formatDateTime:\n    new Function({\n      localName: 'format-date-time',\n      signature: [\n        {arityType: 'required', type: 'string'},\n        {arityType: 'required', type: 'string'},\n      ],\n      call: (env, [value, format]) => {\n        //   const dateTime = dateTimeFromString(context.timeZone, value)\n        //   if (dateTime == null) {\n        //     return ''\n        //   }\n        //   return dateTimeFormatter(format, dateTime)\n      }\n    }),\n}","import {useState} from 'react'\nimport {Box, Button, Icon, Input, Typography, useTheme} from '@mui/material'\nimport {useXlsFormFillerContext} from '../XlsFormFiller.tsx'\n\nexport const QuestionLocation = ({\n  value,\n  onChange,\n}: {\n  value?: [number, number]\n  onChange: (val: null | [number, number]) => void\n}) => {\n  const t = useTheme()\n  const ctx = useXlsFormFillerContext()\n  // const [location, setLocation] = useState<{lat: number; lon: number} | null>(null)\n  const [error, setError] = useState<string | null>(null)\n\n  const handleGetLocation = () => {\n    if (!navigator.geolocation) {\n      setError('Geolocation is not supported by your browser.')\n      return\n    }\n\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        onChange([position.coords.latitude, position.coords.longitude])\n        setError(null)\n      },\n      (err) => {\n        setError(`Error: ${err.message}`)\n        onChange(null)\n      }\n    )\n  }\n\n  return (\n    <>\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={handleGetLocation}\n        startIcon={<Icon>my_location</Icon>}\n      >\n        {ctx.labels.getMyLocation}\n      </Button>\n\n      {location && (\n        <Box sx={{mt: 1, display: 'flex', alignItems: 'center'}}>\n          <Input\n            value={value?.[0]}\n            sx={{mr: 1,}}\n            startAdornment={<Box sx={{fontWeight: t.typography.fontWeightBold}}>Lat:&nbsp;</Box>}\n            fullWidth\n            type=\"number\"\n            disabled\n          />\n          <Input\n            disabled\n            startAdornment={<Box sx={{fontWeight: t.typography.fontWeightBold}}>Lon:&nbsp;</Box>}\n            value={value?.[1]}\n            fullWidth\n            type=\"number\"\n          />\n        </Box>\n      )}\n\n      {error && (\n        <Box mt={2}>\n          <Typography variant=\"body1\" color=\"error\">\n            {error}\n          </Typography>\n        </Box>\n      )}\n    </>\n  )\n}\n","import {alpha, Button, Icon, IconButton, Input, styled, TextField} from '@mui/material'\nimport {useMemo, useRef} from 'react'\nimport {useXlsFormFillerContext} from '../XlsFormFiller.tsx'\nimport {cssMixins} from '../../theme.ts'\nimport {formatFileSize} from '../../utils/helpers.ts'\n\nconst ImageContainer = styled('div')(({theme}) => ({\n  marginTop: theme.spacing(1),\n  marginBottom: theme.spacing(1),\n  fontWeight: theme.typography.fontWeightBold,\n  position: 'relative',\n  width: '100%',\n  border: `1px solid ${theme.palette.divider}`,\n  maxWidth: '100%',\n  maxHeight: 200,\n  objectFit: 'contain',\n  borderRadius: (theme.shape.borderRadius - 4) + 'px',\n  display: 'flex',\n  justifyContent: 'center',\n}))\n\nconst Image = styled('img')(({theme}) => ({\n  margin: 'auto',\n  height: '100%',\n  maxHeight: 200,\n}))\n\nconst DeleteBtn = styled(IconButton)(({theme}) => ({\n  marginRight: theme.spacing(-1),\n  marginLeft: theme.spacing(1),\n}))\n\nexport const QuestionFile = ({\n  onClear,\n  file,\n  onChange,\n  type,\n}: {\n  type?: 'image' | string\n  file?: File\n  onClear: () => void\n  onChange: (_: File) => void\n}) => {\n  const ctx = useXlsFormFillerContext()\n  const fileInputRef = useRef<HTMLInputElement>(null)\n\n  const previewUrl = useMemo(() => {\n    if (type !== 'image' || !file) return\n    return URL.createObjectURL(file)\n  }, [file])\n\n  const handleFile = (file: File) => {\n    onChange(file)\n  }\n\n  const handleDelete = () => {\n    onClear()\n    fileInputRef.current!.value = ''\n  }\n\n  return (\n    <>\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept={type === 'image' ? 'image/*' : ''}\n        style={{display: 'none'}}\n        onChange={(e) => {\n          const file = e.target.files?.[0]\n          if (file) handleFile(file)\n        }}\n      />\n\n      <TextField\n        variant=\"standard\"\n        fullWidth\n        helperText={file ? formatFileSize(file.size) : ''}\n        value={file?.name ?? ''}\n        slotProps={{\n          input: {\n            startAdornment: <Icon color=\"disabled\" sx={{mr: 1}}>{type === 'image' ? 'image' : 'description'}</Icon>,\n            endAdornment: file && (\n              <DeleteBtn\n                aria-label=\"delete\"\n                color=\"primary\"\n                onClick={(e) => {\n                  handleDelete()\n                  e.stopPropagation()\n                }}\n                size=\"small\"\n              >\n                <Icon fontSize=\"small\">delete</Icon>\n              </DeleteBtn>\n            )\n          }\n        }}\n        onClick={() => fileInputRef.current?.click()}\n        placeholder={type === 'image'\n          ? file ? ctx.labels.changeImage : ctx.labels.selectImage\n          : file ? ctx.labels.changeFile : ctx.labels.selectFile\n        }\n      />\n      {previewUrl && (\n        <ImageContainer>\n          <Image\n            src={previewUrl}\n            alt=\"Preview\"\n          />\n        </ImageContainer>\n      )}\n    </>\n  )\n}\n","import {useState} from 'react'\n\nexport const useAttachments = () => {\n  const [attachments, setAttachments] = useState<Record<string, File>>({})\n\n  const save = (file: File) => {\n    setAttachments(prev => ({...prev, [file.name]: file}))\n  }\n\n  const clearByName = (fileName: string) => {\n    setAttachments(prev => {\n      const copy = {...prev}\n      delete copy[fileName]\n      return copy\n    })\n  }\n\n  const get = (fileName: string): File | undefined => {\n    return attachments[fileName]\n  }\n\n  return {\n    get,\n    list: attachments,\n    saveAttachment: save,\n    clearAttachmentByName: clearByName,\n  }\n}"],"mappings":"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","names":["useEffect","useMemo","useState","seq","Box","Button","Icon","get","useMemo","Input","children","Box","Collapse","useTheme","Box","useTheme","jsx","jsx","jsxs","useTheme","Box","Collapse","Box","useTheme","jsx","jsxs","useTheme","Box","AstError","useState","Box","Icon","useTheme","Fragment","jsx","jsxs","useTheme","useState","Icon","Box","Icon","IconButton","styled","Fragment","jsx","jsxs","styled","IconButton","file","Icon","Fragment","jsx","jsxs","useMemo","value","q","Input","useState","get","jsx","jsxs","useState","useEffect","useMemo","seq","get","Box","Button","Icon"]}